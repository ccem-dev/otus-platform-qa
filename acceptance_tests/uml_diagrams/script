var Model = com.change_vision.jude.api.inf.model;
var Editor = com.change_vision.jude.api.inf.editor;
var View = com.change_vision.jude.api.inf.view;
var Point2D = java.awt.geom.Point2D;
var ArrayList = java.util.ArrayList;
var HashMap = java.util.HashMap;

// Object astah : Interface ProjectAccessor

// Add an association between classes
//basicModelEditor.createAssociation(clazz, classB, "association name", "classA end", "classB end");

var attempt = 0; // for avoid dead lock when try remove and recreate element again 

function isAlreadyExistsError(e){
    return e.message.contains("already exists");
}

function getAttributeObject(name, typeOrClass){
    return  {
        name: name, 
        type: (typeOrClass? typeOrClass : "void"), 
        visibility: "public" //default in javascript
    };
}

function getNewParameterObject(name, typeOrClass){
    return  {
        name: name, 
        type: (typeOrClass? typeOrClass : "void"), 
    };
}

function getNewMethodInfoObj(name, isStatic,  isAsync, paramArray, returnType){
    return {
        visibility: "public", //default in javascript
        isStatic: isStatic,
        isAsync: isAsync,
        name: name,
        paramArray: (paramArray? paramArray : ""),
        returnType: (returnType? returnType : "void")
    }
}

function printParameterObj(paramObj){
    print("\tParam: name =", paramObj.name, ", type =", paramObj.type); 
}

function printMethodInfo(methodInfo){
    print("Method :", methodInfo.name,
               "\n\tstatic?", methodInfo.isStatic,
              "\n\tasync?", methodInfo.isAsync,
              "\n\ttype:", methodInfo.returnType,
              "\n\tpars:");
    for(i in methodInfo.paramArray){
        printParameterObj(methodInfo.paramArray[i]);
    }
}


function readFile(path){
    with(new JavaImporter(java.io, java.util.regex, ArrayList, HashMap)) {
        var file = new File(path); 
        var bufferedReader = new BufferedReader(new FileReader(file)); 
        var line;
        var classDeclRegex = "[\\s\\t]*class\\s(\\w+)\\s(extends\\s\\w+)?.*";
        var attributeRegex = "[\\s\\t]*this\\.\\s?(\\w+)\\s?=.*";
        var methodHeaderRegex = "[\\s\\t]*(static\\s)?(async\\s)?(\\w+)\\((.*)\\).*";
        var commandRegex = "if|while"; // commands that looks like method header line
        var hash = new HashMap();
        
        // read class declaration line
        while ((line = bufferedReader.readLine()) != null && !Pattern.matches(classDeclRegex, line)) { }
        var classDeclObj = {
                        name: line.replaceAll(classDeclRegex, "$1"),
                        parentClassName: line.replaceAll(classDeclRegex, "$2").split(" ")[1]
                    };
        hash.put("class", classDeclObj);

        // read rest lines
        var findConstructor = false;
        var methodHeaders = new ArrayList();

        while ((line = bufferedReader.readLine()) != null) {

            // read class attributes from cronstructor
            if(!findConstructor && line.contains("constructor(")){
                findConstructor = true;
                var attributeNames = new ArrayList();
                while ((line = bufferedReader.readLine()) != null && !line.contains("}")) {
                    if(Pattern.matches(attributeRegex, line)){
                        var attributeName = line.replaceAll(attributeRegex, "$1");
                        attributeNames.add(getAttributeObject(attributeName));
                    }
                }
                hash.put("attributes", attributeNames.toArray());
            }

            // read method headers
            if(Pattern.matches(methodHeaderRegex, line)){
                var methodName = line.replaceAll(methodHeaderRegex, "$3");
                if(!Pattern.matches(commandRegex, methodName)){
                    // extract parameters
                    var params = new ArrayList();
                    var parameterStr = line.replaceAll(methodHeaderRegex, "$4");
                    if(parameterStr.length > 0){
                        var paramNames = parameterStr.replace(' ', '').split(',');
                        for(i in paramNames){
                            params.add(getNewParameterObject(name=paramNames[i]));
                        }
                    }
                    // mount method info object
                    var obj = getNewMethodInfoObj(
                        name = methodName,
                        isStatic = (line.replaceAll(methodHeaderRegex, "$1").length !== 0),
                        isAsync = (line.replaceAll(methodHeaderRegex, "$2").length !== 0),
                        paramArray = params.toArray()
                    );
                    methodHeaders.add(obj);
                }
            }
        }

        bufferedReader.close();
        hash.put("methods", methodHeaders.toArray());
        return hash;
    }
}

function importJsClass(path, packageName){
    with(new JavaImporter(ArrayList, HashMap)){
        var hash = readFile(path);
        var classInfo = hash["class"];
        var attributeArray = hash["attributes"];
        var methodInfoArray = hash["methods"];

        var clazz = createClass(classInfo.name, packageName);
        var superClassName = classInfo.parentClassName;
        if(superClassName){
            var superClass = createClass(superClassName, packageName); // if not exist
            addGeneralization(clazz, superClass);
        }

        if(attributeArray){
            addAttributesToClass(clazz, attributeArray);
        }
        
        for(i in methodInfoArray){
            addMethodToClass(clazz, methodInfoArray[i]);
        }
    }
}


function printClassInfo(iClass) {
    print("Class name: " + iClass.getName());
    print("Class definition: " + iClass.getDefinition());
 
    // Display all attributes
    var iAttributes = iClass.getAttributes();
    for (var i in iAttributes) {
        printAttributeInfo(iAttributes[i]);
    }
 
    // Display all operations
    var iOperations = iClass.getOperations();
    for (var i in iOperations) {
        printOperationInfo(iOperations[i]);
    }
 
    // Display inner class information
    var classes = iClass.getNestedClasses();
    for (var i in classes) {
        printClassInfo(classes[i]);
    }
}
 
function printOperationInfo(iOperation) {
    print("Operation name: " + iOperation.getName());
    print("Operation returnType: " + iOperation.getReturnTypeExpression());
    print("Operation definition: " + iOperation.getDefinition());
}
 
function printAttributeInfo(iAttribute) {
    print("Attribute name: " + iAttribute.getName());
    print("Attribute type: " + iAttribute.getTypeExpression());
    print("Attribute definition: " + iAttribute.getDefinition());
}


function getAllPackages(){
    with(new JavaImporter(Model, java.util.ArrayList)) {
        var model = astah.getProject();
        var namedElements = model.getOwnedElements();
        var packages = new ArrayList();
        for (var i in namedElements) {
            var namedElement = namedElements[i];
            if (namedElement instanceof IPackage) {
                packages.add(namedElement);
            }
        }
        return packages.toArray();
    }
}

function getPackage(packageName){
    with(new JavaImporter(Model)) {
        var model = astah.getProject();
        var namedElements = model.getOwnedElements();
        for (var i in namedElements) {
            var namedElement = namedElements[i];
            if (namedElement instanceof IPackage) {
                if(namedElement.getName() == packageName){
                    print('found package', packageName);//.
                    return namedElement;
                }
            }
        }
    }
}

function findDiagram(diagramArr, classDiagramName){
    with(new JavaImporter(Model)) {
        for (var i in diagramArr) {
            var diagram = diagramArr[i];
            if (diagram instanceof IDiagram) {
                if(diagram.getName() == classDiagramName){
                    print('found diagram', classDiagramName);//.
                    return diagram;
                }
            }
        }
    }
   return null;
}

function getClassDiagram(classDiagramName){
    with(new JavaImporter(Model)) {
        var model = astah.getProject();
        var diagrams = model.getDiagrams();
        var diagram = findDiagram(diagrams, classDiagramName);
        if(diagram){
            return diagram;
        }
        
        var packages = getAllPackages();
        for(j in packages){
            var diagrams = packages[j].getDiagrams();
            diagram = findDiagram(diagrams, classDiagramName);
            if(diagram){
                return diagram;
            }
        }

        return null;
    }
}

function getClass(className){
    with(new JavaImporter(Model)) {
        var classes = astah.findElements(IClass.class);
        //print('Class # = ' + classes.length);
        for(var i in classes) {
            var clazz = classes[i];
            //print(clazz.getName() + ', ' + clazz.getOwner().getName());
            if(clazz.getName() == className){
                print('found class', className);//.
                return clazz;
            }
        }
    }
}
 
function createPackage(packageName){
    with(new JavaImporter(Model, Editor)) {
        try{
            TransactionManager.beginTransaction();
            var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();
            var project = astah.getProject();
            var newPackage = basicModelEditor.createPackage(project, packageName);
            TransactionManager.endTransaction();
            return newPackage;
        }
        catch(e){
           TransactionManager.abortTransaction();
           if(isAlreadyExistsError(e)){
               return getPackage(packageName);
           }
           print("Error at create package " + packageName +": " + e.message);
       }
    }
}

function createClass(className, packageName){
   with(new JavaImporter(Model, Editor)) {
       try{
           TransactionManager.beginTransaction();
            var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();
        
            var clazz = getClass(className);
            if(clazz){ // clear class
                 var attributes = clazz.getAttributes();
               for(i in attributes){
                   basicModelEditor.delete(attributes[i]);
               }
               var operations = clazz.getOperations();
               for(i in operations){
                   basicModelEditor.delete(operations[i]);
               }
            }
            else{
                var _package = getPackage(packageName);
                clazz = basicModelEditor.createClass(_package, className);
            }
            
            TransactionManager.endTransaction();
            print(className, 'class created');//.
            return clazz;
       }
       catch(e){
           TransactionManager.abortTransaction();
           print("Error at create class " + className +": " + e.message);
           return null;
       }
    }
}

function createClassDiagram(classDiagramName, packageName){
    with(new JavaImporter(Editor)) {
        TransactionManager.beginTransaction();
        try{
            var classDiagramEditor = astah.getDiagramEditorFactory().getClassDiagramEditor();
            var diagram = classDiagramEditor.createClassDiagram(getPackage(packageName), classDiagramName);
            TransactionManager.endTransaction();
            return diagram;
        }
        catch(e){
           TransactionManager.abortTransaction();
           if(isAlreadyExistsError(e)){
               return getClassDiagram(classDiagramName);
           }
           print("Error at create class diagram" + classDiagramName +": " + e.message);
           return null;
       }
    }
}

function addAttributesToClass(clazz, attributesArray){
    with(new JavaImporter(Model, Editor)) {
        TransactionManager.beginTransaction();
        var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();

        for(var i in attributesArray){
            var attr = attributesArray[i];
            try{
                var attribute = basicModelEditor.createAttribute(clazz, attr.name, attr.type);
                attribute.setVisibility(attr.visibility);
            }
            catch(e){
                if(!isAlreadyExistsError(e)){
                   print("Error at add attribute " + attr.name  +" in " + clazz.getName() +" class: " + e.getMessage());
                   TransactionManager.abortTransaction();
                   return;
               }
            }
        }

        TransactionManager.endTransaction();
        //print('addAttributesToClass finished');//.
    }
}

function addMethodToClass(clazz, methodInfoObj){
     with(new JavaImporter(Model, Editor)) {
        TransactionManager.beginTransaction();
        var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();
        var methodName = methodInfoObj.name;
        try{
            var operation = getOperationFromClass(methodName, clazz);
            if(operation){
                basicModelEditor.delete(operation);
            }
            operation = basicModelEditor.createOperation(clazz, methodName, methodInfoObj.returnType);
            operation.setVisibility(methodInfoObj.visibility);
            operation.setStatic(methodInfoObj.isStatic);
            addParametersToOperation(operation, methodInfoObj.paramArray, basicModelEditor);
            TransactionManager.endTransaction();
            //print('addMethodToClass finished');//.
            return operation;
        }
        catch(e){
            print("Error at add method " + methodName  +" to " + clazz.getName() +" class: " + e.message);
            TransactionManager.abortTransaction();
        }
    }
}

function addParametersToOperation(operation, paramObjArray, basicModelEditor){
    // transation manager already initialized
    for(i in paramObjArray){
        try{
            var paramObj = paramObjArray[i];
            basicModelEditor.createParameter(operation, paramObj.name, paramObj.type);
        }
        catch(e){
            if(!isAlreadyExistsError(e)){
                throw e;
            }
        }
    }
}

function getOperationFromClass(operationName, clazz){
    var operations = clazz.getOperations();
    for(i in operations){
        if(operations[i].getName().equals(operationName)){
            return operations[i];
        }
    }
    return null;
}

function deleteOperationFromClass(operation, clazz){
    with(new JavaImporter(Model, Editor)) {
        TransactionManager.beginTransaction();
        var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();
        try{
            basicModelEditor.delete(operation);
            TransactionManager.endTransaction();
            print('deleteOperationFromClass finished');//.
        }
        catch(e){
            print("Error at delete operation " + operationName  +" from " + clazz.getName() +" class: " + e.message);
            TransactionManager.abortTransaction();
        }
    }
}

function addGeneralization(subClass, superClass){
    with(new JavaImporter (Model, Editor)) {
        try{
            TransactionManager.beginTransaction();
            var basicModelEditor = astah.getModelEditorFactory().getBasicModelEditor();
            basicModelEditor.createGeneralization(subClass, superClass, "");
            TransactionManager.endTransaction();
            print('addGeneralization finished');
            
            //basicModelEditor.createAssociation(clazz, classB, "association name", "classA end", "classB end");
        }
        catch(e){
            print(e.getMessage());
            //throw e;
        }
    }
}

function addGeneralizationByName(subClassName, superClassName){
    var subClass = getClass(subClassName);
    var superClass = getClass(superClassName);
    addGeneralization(subClass, superClass);
}

function createConection(){ // or Realization or Usage
    var editor = astah.getModelEditorFactory().getCompositeStructureModelEditor();
    //http://members.change-vision.com/javadoc/astah-api/8_1_0/api/en/doc/javadoc/com/change_vision/jude/api/inf/editor/CompositeStructureModelEditor.html
}

function openClassOnDiagram(diagram, className, posX, posY){
    with(new JavaImporter(Model, Editor, View, Point2D)) {
        var diagramViewManager = astah.getViewManager().getDiagramViewManager();
        diagramViewManager.open(diagram);
        TransactionManager.beginTransaction();
        var classDiagramEditor = astah.getDiagramEditorFactory().getClassDiagramEditor();
        classDiagramEditor.setDiagram(diagram);
        var point = new Point2D.Float(posX, posY);
        var nodePresentation = classDiagramEditor.createNodePresentation(getClass(className), point);
        TransactionManager.endTransaction();
        return nodePresentation;
    }
}


// ********************************************
// Execution

/*
createPackage("Example");
var diagram = createClassDiagram("Diagram1", "Example");
createClass("ClassA", "Example");
createClass("ClassB", "Example");
addGeneralization("ClassB", "ClassC");
addAttributesToClass("ClassB", [
    getAttributeObject("aaa"),
    getAttributeObject("bb")
]);*/

function foo(){
    var diagram = getClassDiagram("Diagram1");
    var nodePresentation = openClassOnDiagram(diagram, "PageExtended", 50, 40);
    print(nodePresentation.getRectangle());
}


//importJsClass("/home/flavia/ccem/otus-platform-qa/acceptance_tests/code/handlers/FileHandler.js", "Example");
importJsClass("/home/flavia/ccem/otus-platform-qa/acceptance_tests/code/classes/PageExtended.js", "Example");
//"/home/flavia/ccem/otus-platform-qa/acceptance_tests/uml_diagrams/exampleCode.js"
